import { TranslationMessages } from "react-admin";
import englishMessages from "ra-language-english";

const customEnglishMessages: TranslationMessages = {
  ...englishMessages,
  custom_auth: {
    invitation_code_not_valid: "Invitation code is not valid",
    user_already_exists: "User already exists",
    forgot_password: "Forgot your password?",
    confirm_email: "Confirm email",
    register: "Register",
    register_error: "Register error",
    register_success: "Registered successfully! Please check your email.",
    confirm_password: "Confirm password",
    invitation_code: "Invitation code",
    login: "Login",
    already_have_an_account: "Already have an account? Login",
    create_a_new_account: "Create a new account",
    email_error: "Incorrect or missing email address. Please try again.",
  },
  pos: {
    search: "Search",
    configuration: "Configuration",
    language: "Language",
    theme: {
      name: "Theme",
      light: "Light",
      dark: "Dark",
    },
    dashboard: {
      monthly_revenue: "Monthly Revenue",
      month_history: "30 Day Revenue History",
      new_orders: "New Orders",
      pending_reviews: "Pending Reviews",
      all_reviews: "See all reviews",
      new_customers: "New Customers",
      all_customers: "See all customers",
      pending_orders: "Pending Orders",
      order: {
        items:
          "by %{customer_name}, one item |||| by %{customer_name}, %{nb_items} items",
      },
      welcome: {
        title: "Welcome to the react-admin e-commerce demo",
        subtitle:
          "This is the admin of an imaginary poster shop. Feel free to explore and modify the data - it's local to your computer, and will reset each time you reload.",
        ra_button: "react-admin site",
        demo_button: "Source for this demo",
      },
    },
    menu: {
      sales: "Sales",
      catalog: "Catalog",
      customers: "Customers",
    },
  },
  resources: {
    users: {
      name: "Users",
    },
    customers: {
      name: "Customer |||| Customers",
      fields: {
        commands: "Orders",
        user_name: "Username",
        first_seen: "First seen",
        groups: "Segments",
        last_seen: "Last seen",
        last_seen_gte: "Visited Since",
        name: "Name",
        first_name: "First name",
        last_name: "Last name",
        total_spent: "Total spent",
        password: "Password",
        confirm_password: "Confirm password",
        stateAbbr: "State",
        is_approved: "Approved",
        approval: "Approve",
        non_approval: "Decline",
        mail_verified: "Email verified",
        is_verified: "Yes",
        is_not_verified: "No",
        created_at: "Created at",
        balance: "Balance (EUR)",
      },
      filters: {
        last_visited: "Last visited",
        today: "Today",
        this_week: "This week",
        last_week: "Last week",
        this_month: "This month",
        last_month: "Last month",
        earlier: "Earlier",
        has_ordered: "Has ordered",
        has_newsletter: "Has newsletter",
        group: "Segment",
      },
      fieldGroups: {
        identity: "Identity",
        address: "Address",
        stats: "Stats",
        history: "History",
        password: "Password",
        change_password: "Change password",
        old_password: "Old password",
        new_password: "New password",
        confirm_password: "Repeat password",
        password_success: "Password changed successfully",
        password_missmatch: "Passwords do not match",
        password_req:
          "Password must contain at least one lowercase letter, one uppercase letter, one number and one special character",
      },
      page: {
        delete: "Delete Customer",
      },
      errors: {
        password_mismatch:
          "The password confirmation is not the same as the password.",
      },
    },
    commands: {
      name: "Order |||| Orders",
      amount: "1 order |||| %{smart_count} orders",
      title: "Order %{reference}",
      fields: {
        basket: {
          delivery: "Delivery",
          reference: "Reference",
          quantity: "Quantity",
          sum: "Sum",
          tax_rate: "Tax Rate",
          taxes: "Tax",
          total: "Total",
          unit_price: "Unit Price",
        },
        address: "Address",
        customer_id: "Customer",
        date_gte: "Passed Since",
        date_lte: "Passed Before",
        nb_items: "Nb Items",
        total_gte: "Min amount",
        status: "Status",
        returned: "Returned",
      },
      section: {
        order: "Order",
        customer: "Customer",
        shipping_address: "Shipping Address",
        items: "Items",
        total: "Totals",
      },
    },
    invoices: {
      name: "Invoice |||| Invoices",
      fields: {
        date: "Invoice date",
        customer_id: "Customer",
        command_id: "Order",
        date_gte: "Passed Since",
        date_lte: "Passed Before",
        total_gte: "Min amount",
        address: "Address",
      },
    },
    products: {
      name: "Product |||| Products",
      fields: {
        category_id: "Category",
        height_gte: "Min height",
        height_lte: "Max height",
        height: "Height",
        image: "Image",
        price: "Price",
        reference: "Reference",
        sales: "Sales",
        stock_lte: "Low Stock",
        stock: "Stock",
        thumbnail: "Thumbnail",
        width_gte: "Min width",
        width_lte: "Max width",
        width: "Width",
      },
      tabs: {
        image: "Image",
        details: "Details",
        description: "Description",
        reviews: "Reviews",
      },
      filters: {
        categories: "Categories",
        stock: "Stock",
        no_stock: "Out of stock",
        low_stock: "1 - 9 items",
        average_stock: "10 - 49 items",
        enough_stock: "50 items & more",
        sales: "Sales",
        best_sellers: "Best sellers",
        average_sellers: "Average",
        low_sellers: "Low",
        never_sold: "Never sold",
      },
    },
    categories: {
      name: "Category |||| Categories",
      fields: {
        products: "Products",
      },
    },
    reviews: {
      name: "Review |||| Reviews",
      amount: "1 review |||| %{smart_count} reviews",
      relative_to_poster: "Review on poster",
      detail: "Review detail",
      fields: {
        customer_id: "Customer",
        command_id: "Order",
        product_id: "Product",
        date_gte: "Posted since",
        date_lte: "Posted before",
        date: "Date",
        comment: "Comment",
        rating: "Rating",
      },
      action: {
        accept: "Accept",
        reject: "Reject",
      },
      notification: {
        approved_success: "Review approved",
        approved_error: "Error: Review not approved",
        rejected_success: "Review rejected",
        rejected_error: "Error: Review not rejected",
      },
    },
    segments: {
      name: "Segment |||| Segments",
      fields: {
        customers: "Customers",
        name: "Name",
      },
      data: {
        compulsive: "Compulsive",
        collector: "Collector",
        ordered_once: "Ordered once",
        regular: "Regular",
        returns: "Returns",
        reviewer: "Reviewer",
      },
    },
  },
  echtzeitkiosk: {
    email: {
      notification_checkbox_for_customer_order:
        "Email notification for customer order",
      verify_email_title: "Verify Email",
      verify_email_success: "Email verified successfully",
      verify_email_error: "Email verification failed",
      bad_token: "Wrong token or empty token provided!",
    },
    recentRegistrations: "Recent Registrations",
    balance: {
      update: "Update Balance",
      update_descr: "Enter the new balance",
      update_placeholder: "New Balance, e.g. 100.00",
      name: "Balance",
    },
    treasury: {
      current_balance: "System Balance",
      update_dialog: {
        title: "Update System Balance",
        description: "Enter the new system balance",
        placeholder: "New Balance, e.g. 100.00",
      },
    },

    buttons: {
      update: "Update",
      cancel: "Cancel",
      delete: "Delete",
      create_product: "Create new product",
      yes: "Yes",
      no: "No",
      reset_pw: "Send password reset link to your email",
      send_invoice: "Send invoice",
      download_pdf: "Download PDF",
    },
    feedback: {
      success: {
        product_saved: "Product successfully saved",
        approved: "Approved",
        not_approved: "Not approved",
        forgot_pw_mail_sent: "Reset password email successfully sent.",
      },
      errors: {
        something_wrong: "Something went wrong.",
        email_mismatch: "Email addresses don't match.",
        forgot_pw_mail: "Failed to send Email for resetting password: ",
      },
      question: {
        sure: "Are you sure?",
        sure_yes: "Pressing 'Yes' will change",
      },
      warning: {
        title: "Warning",
        text: "This action cannot be undone.",
      },
    },
    products: {
      title: "Products",
      product_title: "Product Title",
      quantity: "Quantity",
      photo_url: "URL Product Photo",
      created_at: "Created at",
      unit_price: "Unit Price (EUR)",
      delete_option: "Delete!",
      in_stock: "in stock",
      in_cart: "In Cart:",
      cart: "Cart",
      cart_price: "Price (EUR)",
      cart_subtotal: "Subtotal (EUR)",
      out_of_stock: "Out of stock",
    },
    previous_orders: {
      name: "Previous Orders",
    },
    system_state: {
      name: "System State",
      send_invoice_to_all: "Send Invoice To All Customers",

      send_invoice_to_all_help_text:
        "Sends only if a user has a customer order that has not yet been assigned to an invoice.",
    },
    customer_invoices: {
      name: "Customer Invoices",
      download: "Download",
      type: "Type",
      current_user_balance: "Current User Balance (EUR)",
      user: "User",
      total: "Total (EUR)",
      month_year: "Month-Year",
      order_id: "Order ID",
    },
  },
  from: "from",
  to: "to",
};

export default customEnglishMessages;
